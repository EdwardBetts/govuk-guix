#!/usr/bin/guile --no-auto-compile
-*- scheme -*-
!#

;; To allow this script to be run directly, even from the Git
;; repository, check if the environment is setup by checking if the
;; (gds services) module is loadable. If it's not loadable, start this
;; script again, but use the guix-pre-inst-env helper to setup the
;; environment.
(catch
  #t
  (lambda ()
    (resolve-interface '(gds services)))
  (lambda args
    (let* ((govuk-guix-root
            (or (and=> (current-filename)
                       (lambda (x)
                         (dirname (dirname x))))
                (getenv "GOVUK_GUIX_ROOT")
                (error "Unable to locate the govuk-guix root")))
           (command-full-path
            (string-append govuk-guix-root "/bin/govuk-data")))
      (exit
       (status:exit-val
        (apply
         system*
         "bash"
         (string-append govuk-guix-root "/guix-pre-inst-env")
         "guile"
         command-full-path
         (cdr (command-line))))))))

(use-modules
 (srfi srfi-1)
 (srfi srfi-11)
 (srfi srfi-19)
 (srfi srfi-26)
 (srfi srfi-37)
 (ice-9 match)
 (ice-9 format)
 (guix ui)
 (guix scripts)
 (gnu services)
 (gnu system)
 (gds utils)
 (gds services govuk)
 (gds services govuk routing-configuration)
 (gds services utils databases)
 (gds services utils databases mysql)
 (gds services utils databases mongodb)
 (gds services utils databases postgresql)
 (gds services utils databases elasticsearch)
 (gds systems govuk development)
 (gds data data-source)
 (gds data data-extract)
 (gds data govuk)
 (gds scripts govuk data list)
 (gds scripts govuk data load)
 (gds scripts govuk data build-snapshot)
 (gds scripts govuk data build-data-directory-with-index))

(define (parse-date str)
  (string->date str "~d/~m/~Y"))

(define options
  ;; Specifications of the command-line options.
  (list (option '("database") #t #f
                (lambda (opt name arg result)
                  (alist-cons 'database
                              arg
                              result)))
        (option '("before") #t #f
                (lambda (opt name arg result)
                  (alist-cons 'before
                              (parse-date arg)
                              result)))
        (option '("after") #t #f
                (lambda (opt name arg result)
                  (alist-cons 'after
                              (parse-date arg)
                              result)))
        (option '("exclude-service") #t #f
                (lambda (opt name arg result)
                  (alist-cons 'exclude-service
                              arg
                              result)))
        (option '("dry-run") #f #f
                (lambda (opt name arg result)
                  (alist-cons 'dry-run? #t result)))))

(define (configure-services services)
  (set-routing-configuration-for-services
   (map
    (cut update-service-database-connection-config-for-environment "development" <>)
    services)
   ;; Currently when using this, high ports are being used for the
   ;; databases, so use the same configuration here as well to make
   ;; the port numbers match
   #:use-high-ports? #t))

(define (options->services-and-data-extracts opts)
  (let* ((service-names
          (filter-map (match-lambda
                       (('argument . a) a)
                       (_ #f))
                      opts))
         (service-names-to-exclude
          (map string->symbol
               (filter-map (match-lambda
                             (('exclude-service . a) a)
                             (_ #f))
                           opts)))
         (databases
          (filter-map (match-lambda
                       (('database . d) d)
                       (_ #f))
                      opts))
         (services (configure-services
                    (if (null? service-names)
                        govuk-services
                        (get-services service-names))))
         (service-types (map service-kind services))
         (data-extracts
          (filter-extracts
           (all-extracts)
           #:service-types (filter
                            (lambda (service-type)
                              (not (member (service-type-name service-type)
                                           service-names-to-exclude)))
                            service-types)
           #:databases (if (null? databases) #f databases)
           #:before-date (assq-ref opts 'before)
           #:after-date (assq-ref opts 'after))))
    (list services data-extracts
          #:dry-run? (assq-ref opts 'dry-run?))))

(define (get-services service-names)
  (map
   (lambda (service-name)
     (or
      (find (lambda (service)
              (eq?
               (string->symbol service-name)
               (service-type-name (service-kind service))))
            all-services)
      (leave (G_ "Could not find service with name ~A")
             service-name)))
   service-names))

(define (govuk-data . args)
  (define commands
    `(("list" . ,list-available-extracts)
      ("load" . ,load-extracts)
      ("build-snapshot" . ,build-snapshot)
      ("build-data-directory-with-index" . ,build-data-directory-with-index)))

  (display "\n")
  (with-error-handling
    (if (= (length args) 1)
        (leave (G_ "no command specified"))
        (let* ((command (second args))
               (handler
                (assoc-ref commands command)))
          (if handler
              (apply handler (options->services-and-data-extracts
                              (parse-command-line (cddr args) options '(()))))

              (leave (G_ "command ~A is not recognised") command))))))

(apply govuk-data (command-line))
