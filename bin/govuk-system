#!/usr/bin/guile --no-auto-compile
-*- scheme -*-
!#

;; To allow this script to be run directly, even from the Git
;; repository, check if the environment is setup by checking if the
;; (gds services) module is loadable. If it's not loadable, start this
;; script again, but use the guix-pre-inst-env helper to setup the
;; environment.
(catch
  #t
  (lambda ()
    (resolve-interface '(gds services)))
  (lambda args
    (let* ((govuk-guix-root
            (or (and=> (current-filename)
                       (lambda (x)
                         (dirname (dirname x))))
                (getenv "GOVUK_GUIX_ROOT")
                (error "Unable to locate the govuk-guix root")))
           (command-full-path
            (string-append govuk-guix-root "/bin/govuk-system")))
      (exit
       (status:exit-val
        (apply
         system*
         "bash"
         (string-append govuk-guix-root "/guix-pre-inst-env")
         "guile"
         command-full-path
         (cdr (command-line))))))))

(use-modules
 (srfi srfi-1)
 (srfi srfi-26)
 (srfi srfi-37)
 (ice-9 match)
 (ice-9 rdelim)
 (guix ui)
 (guix monads)
 (guix scripts)
 (guix scripts build)
 (guix derivations)
 (guix grafts)
 (guix store)
 (guix build utils)
 (gnu services)
 (gnu services web)
 (gnu system)
 (gnu system linux-container)
 (gnu system file-systems)
 (gds utils)
 (gds services govuk)
 (gds services govuk tailon)
 (gds services govuk nginx)
 (gds systems utils)
 (gds systems govuk development))

(define %build-default-options
  ;; Alist of default option values.
  `((graft? . #t)
    (substitutes? . #t)
    (build-hook? . #t)
    (print-build-trace? . #t)
    (verbosity . 0)))

(define %default-options
  (let ((data-dir (or (getenv "XDG_DATA_HOME")
                      (and=> (getenv "HOME")
                             (cut string-append <> "/.local/share")))))
    `(,@(if (file-exists? data-dir)
            (let ((var/lib-dir
                   (string-append
                    data-dir
                    "/govuk-guix/systems/development/state/var/lib")))
              (mkdir-p var/lib-dir)
              (list
               (cons
                'file-system-mapping
                (file-system-mapping (source var/lib-dir)
                                     (target "/var/lib")
                                     (writable? #t)))))
            '())
      ,@%build-default-options)))

(define (service-names->service-types service-names)
  (map
   (lambda (service-name)
     (or (find (lambda (service-type)
                 (equal?
                  (string->symbol service-name)
                  (service-type-name service-type)))
               (map service-kind govuk-services))
         (begin
           (let
               ((similarly-named-services
                 (find-similar-strings service-name
                                       (map (lambda (service)
                                              (symbol->string
                                               (service-type-name
                                                (service-kind service))))
                                            govuk-services))))
             (if (null? similarly-named-services)
                 (leave (G_ "No service called ~A") service-name)
                 (leave (G_ "No service called ~A, did you mean ~A?")
                        service-name (first similarly-named-services)))))))
   service-names))

(define (operating-system-for service-names)
  (update-system-services-package-source-from-environment
  (system-without-unnecessary-services
   (let ((service-types-whitelist
          (append
           (if (null? service-names)
               (map service-kind govuk-services)
               (service-names->service-types service-names))
           (cons*
            govuk-nginx-service-type
            (or (and=> (find (lambda (service)
                               (eq? 'tailon
                                    (service-type-name
                                     (service-kind service))))
                             (operating-system-user-services development-os))
                       service-kind)
                (error "Could not find tailon"))
            authenticating-proxy-service-type
            (map service-kind base-services)))))
     (filter
      (lambda (service)
        (member (service-kind service) service-types-whitelist))
      (operating-system-user-services development-os)))
   development-os)))

(define options
  ;; Specifications of the command-line options.
  (cons* (option '("share") #t #f
                 (lambda (opt name arg result)
                   (alist-cons 'file-system-mapping
                               (specification->file-system-mapping arg #t)
                               result)))
         (option '("no-data-persistence") #f #f
                 (lambda (opt name arg result)
                   (remove (match-lambda
                             (('file-system-mapping . value)
                              (equal? (file-system-mapping-target value)
                                      "/var/lib"))
                             ((key . value) #f))
                           result)))
         %standard-build-options))

(define (start . args)
  (define (option-values opts key)
    (reverse
     (filter-map (match-lambda
                   ((head . tail)
                    (and (eq? key head) tail))
                   (_ #f))
                 opts)))

  (define (start-script opts)
    (with-store store
      (set-build-options-from-command-line store opts)

      (run-with-store store
        (mbegin %store-monad
          (set-grafting #f)
          (mlet* %store-monad
              ((sys (container-script
                     (operating-system-for (option-values opts 'argument))
                     #:mappings (option-values opts 'file-system-mapping)
                     #:container-shared-network? #t)))
            (mbegin %store-monad
              (built-derivations (list sys))
              (return (derivation->output-path sys))))))))

  (define (sudo-path)
    (find
     file-exists?
     '("/run/setuid-programs/sudo"
       "/usr/bin/sudo")))

  (let* ((opts (parse-command-line args options (list %default-options))))
    (exit
     (status:exit-val
      (apply
       system*
       (if (eq? (getuid) 1)
           (list (start-script opts))
           (list
            (sudo-path)
            (start-script opts))))))))

(define (passphrase . args)
  (or (and=> (getenv "GOVUK_GUIX_DEVELOPMENT_PASSPHRASE")
             (lambda (passphrase)
               (simple-format
                #t
                "The passphrase (set through GOVUK_GUIX_DEVELOPMENT_PASSPHRASE) is: ~A"
                passphrase)))
      (let ((data-dir (or (getenv "XDG_DATA_HOME")
                          (and=> (getenv "HOME")
                                 (cut string-append <> "/.local/share")))))
        (if (file-exists? data-dir)
            (let* ((passphrase-file
                    (string-append
                     data-dir
                     "/govuk-guix/systems/development/passphrase")))
              (if (file-exists? passphrase-file)
                  (let ((passphrase
                         (call-with-input-file passphrase-file read-line)))
                    (simple-format
                     #t
                     "The passphrase for the development system is recorded in ~A. It is:\n\n  ~A\n\n"
                     passphrase-file
                     passphrase))
                  (leave
                   (G_ "The passphrase file could not be found at ~A")
                   passphrase-file)))
            (leave
             (G_ "The data directory could not be determined"))))))

(define (govuk-system . args)
  (define commands
    `(("start" . ,start)
      ("passphrase" . ,passphrase)))

  (display "\n")
  (with-error-handling
    (if (= (length args) 1)
        (leave (G_ "no command specified"))
        (let* ((command (second args))
               (handler
                (assoc-ref commands command)))
          (if handler
              (apply handler (cddr args))
              (leave (G_ "command ~A is not recognised") command))))))

(apply govuk-system (command-line))
