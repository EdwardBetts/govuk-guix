#!/usr/bin/guile --no-auto-compile
-*- scheme -*-
!#

(define govuk-guix-root
  (or (and=> (current-filename)
             (lambda (x)
               (dirname (dirname x))))
      (getenv "GOVUK_GUIX_ROOT")))

;; To allow this script to be run directly, even from the Git
;; repository, check if the environment is setup by checking if the
;; (gds services) module is loadable. If it's not loadable, start this
;; script again, but use the guix-pre-inst-env helper to setup the
;; environment.
(catch
  #t
  (lambda ()
    (resolve-interface '(gds services)))
  (lambda args
    (let* ((govuk-guix-root
            (or govuk-guix-root
                (error "Unable to locate the govuk-guix root")))
           (command-full-path
            (string-append govuk-guix-root "/bin/govuk-system")))
      (exit
       (status:exit-val
        (apply
         system*
         "bash"
         (string-append govuk-guix-root "/guix-pre-inst-env")
         "guile"
         command-full-path
         (cdr (command-line))))))))

(use-modules
 (srfi srfi-1)
 (srfi srfi-26)
 (srfi srfi-37)
 (ice-9 match)
 (ice-9 rdelim)
 (guix ui)
 (guix monads)
 (guix scripts)
 (guix scripts build)
 (guix derivations)
 (guix grafts)
 (guix gexp)
 (guix store)
 (guix build utils)
 (gnu packages linux)
 (gnu services)
 (gnu services base)
 (gnu services web)
 (gnu services networking)
 (gnu system)
 (gnu system vm)
 (gnu system linux-container)
 (gnu system file-systems)
 (gds utils)
 (gds services rails)
 (gds services utils)
 (gds services govuk)
 (gds services govuk plek)
 (gds services govuk nginx)
 (gds services govuk signon)
 (gds services govuk admin-environment-style)
 (gds services govuk routing-configuration)
 (gds services govuk data-snapshot)
 (gds services utils databases)
 (gds systems utils)
 (gds systems govuk base)
 (gds systems govuk development)
 (gds scripts govuk system available-services))

(define %build-default-options
  ;; Alist of default option values.
  `((graft? . #t)
    (substitutes? . #t)
    (build-hook? . #t)
    (print-build-trace? . #t)
    (verbosity . 0)))

(define %default-options
  (let ((data-dir (or (getenv "XDG_DATA_HOME")
                      (and=> (getenv "HOME")
                             (cut string-append <> "/.local/share")))))
    `(,@(if (file-exists? data-dir)
            (let ((var/lib-dir
                   (string-append
                    data-dir
                    "/govuk-guix/systems/development/state/var/lib")))
              (mkdir-p var/lib-dir)
              (list
               (cons
                'file-system-mapping
                (file-system-mapping (source var/lib-dir)
                                     (target "/var/lib")
                                     (writable? #t)))))
            '())
      (rails-environment . "development")
      (host-name . "dev.gov.uk")
      (use-high-ports? . #t)
      (use-https? . #f)
      ,@%build-default-options)))

(define (parse-services services)
  (define (no-service-called name)
    (let
        ((similarly-named-services
          (find-similar-strings name
                                (map (lambda (service)
                                       (symbol->string
                                        (service-type-name
                                         (service-kind service))))
                                     govuk-services))))
      (if (null? similarly-named-services)
          (leave (G_ "No service called ~A") name)
          (leave (G_ "No service called ~A, did you mean ~A?")
                 name (first similarly-named-services)))))

  (define (service-name->type name)
    (or (find (lambda (service-type)
                (eq?
                 (string->symbol name)
                 (service-type-name service-type)))
              (map service-kind govuk-services))
        (no-service-called name)))

  (map
   (lambda (service)
     (match (string-split service #\@)
       ((name revision)
        (cons (service-name->type name) revision))
       ((name) (service-name->type name))))
   services))

(define* (operating-system-for-services
          host-name
          services
          rails-environment
          app-domain
          web-domain
          admin-environment-label
          signon-instance-name
          use-high-ports
          use-https
          signon-users
          origin-basic-auth-usernames-and-passwords
          read-bundle-install-input-as-tar-archive
          http-ports-mode
          use-error-pages?
          data-snapshot)

  (define parsed-services (parse-services services))

  (define service-types
    (map (match-lambda
           ((type . revision) type)
           (type type))
         parsed-services))

  (define service-types-whitelist
    (append
     (if (null? service-types)
         (map service-kind govuk-services)
         service-types)
     (cons*
      govuk-nginx-service-type
      ;; TODO: The authenticating-proxy service isn't required by
      ;; anything.
      authenticating-proxy-service-type
      asset-manager-service-type
      (map service-kind base-services))))

  (define base-system
    (update-system-services-package-source
     (filter pair? parsed-services)
     (system-without-unnecessary-services
      (filter
       (lambda (service)
         (member (service-kind service) service-types-whitelist))
       (operating-system-user-services govuk-development-os))
      govuk-development-os)))

  (define routing-configuration-arguments
    `(#:use-high-ports? ,use-high-ports
      #:use-https? ,use-https
      #:http-ports-mode ,http-ports-mode
      #:app-domain ,(or app-domain
                        host-name)
      #:web-domain ,(or web-domain
                        (string-append "www." host-name))))

  (define plek-config
    (apply plek-config-from-routing-configuration-arguments
           (operating-system-user-services base-system)
           routing-configuration-arguments))

  (define database-service-ports
    (if use-high-ports
        high-database-service-ports
        default-database-service-ports))

  (define (add-database-startup-scripts services)
    (map ensure-database-user-exists-on-service-startup
         (map run-db:setup-if-postgresql-or-mysql-is-used services)))

  (define (configure-signon-users services)
    (cond
     ((memq 'none signon-users)
      (unless (eq? (length signon-users) 1)
        (display "error: if --signon-users=none is specified, addition users cannot be\n")
        (exit 1))
      services)
     ((null? signon-users)
      (update-signon-service-add-users
       (list
        (signon-user
         (name "Dev")
         (email "dev@dev.gov.uk")
         (passphrase (signon-dev-user-passphrase))
         (role "superadmin")
         (application-permissions
          (default-signon-user-permissions services))))
       services))
     (else
      (let ((users
             (map (lambda (user)
                    (if (eq? 'unset
                             (signon-user-application-permissions user))
                        (signon-user
                         (inherit user)
                         (application-permissions
                          (default-signon-user-permissions services)))
                        user))
                  signon-users)))

        (update-signon-service-add-users users services)))))

  (define (set-routing-configuration services)
    (apply
     set-routing-configuration-for-services
     services
     routing-configuration-arguments))

  (define (set-rails-environment services)
    (map
     (cut update-rails-app-config-environment-for-service
       rails-environment <>)
     services))

  (define (set-admin-environment-label services)
    (if admin-environment-label
        (use-govuk-admin-template-environment-label
         services
         admin-environment-label)
        services))

  (define (set-origin-basic-auth services)
    (if (null? origin-basic-auth-usernames-and-passwords)
        services
        (modify-services services
          (govuk-nginx-service-type config =>
                                    (govuk-nginx-configuration
                                     (inherit config)
                                     (origin-password-file
                                      (password-file
                                       (usernames-and-passwords
                                        origin-basic-auth-usernames-and-passwords))))))))

  (define (set-nginx-intercept-errors services)
    (modify-services services
      (govuk-nginx-service-type config =>
                                (govuk-nginx-configuration
                                 (inherit config)
                                 (intercept-errors use-error-pages?)))))

  (define (set-signon-instance-name services)
    (update-services-parameters
     services
     (list
      (cons
       signon-service-type
       (list
        (cons
         signon-config?
         (lambda (config)
           (signon-config
            (inherit config)
            (instance-name
             (if (and (string? signon-instance-name)
                      (string=? signon-instance-name ""))
                 #f
                 signon-instance-name))))))))))

  (define (set-read-bundle-install-input-as-tar-archive services)
    (update-rails-app-set-read-bundle-install-input-as-tar-archive
     read-bundle-install-input-as-tar-archive
     services))

  (define (add-load-data-snapshot-service-if-necessary services)
    (if data-snapshot
        (append
         services
         (list
          (service load-data-snapshot-service-type
                   data-snapshot)))
        services))

  (define set-services-configuration
    (let
        ((service-setup-functions
          (list
           ;; TODO The ordering is important here, without this coming
           ;; before add-database-startup-scripts, the wrong ports can
           ;; be used
           set-routing-configuration
           set-signon-instance-name
           set-read-bundle-install-input-as-tar-archive
           add-database-startup-scripts
           set-admin-environment-label
           set-rails-environment
           configure-signon-users
           set-origin-basic-auth
           set-nginx-intercept-errors
           add-load-data-snapshot-service-if-necessary)))

      (apply compose (reverse service-setup-functions))))

  (operating-system
   (inherit base-system)
   (host-name host-name)
   (hosts-file (plek-config->hosts-file plek-config))
   (packages useful-packages)
   (services (set-services-configuration
              (operating-system-user-services base-system)))))

(define (default-signon-user-permissions services)
  (map
   (lambda (app)
     (cons
      (signon-application-name app)
      (or (assoc-ref '(("Whitehall" . ("signin" "GDS Admin"
                                       "Managing Editor"))
                       ("Asset Manager" . ())
                       ("HMRC Manuals API" . ())
                       ("Publishing API" . ()))
                     (signon-application-name app))
          (signon-application-supported-permissions app))))
   (filter-map
    (lambda (service)
      (and (list? (service-parameters service))
           (find signon-application? (service-parameters service))))
    services)))

(define (parse-signon-user-argument arg)
  (define* (signon-user-record
            #:key name email role
            (passphrase (random-base16-string 16))
            (application-permissions 'unset))
    (signon-user
     (name name)
     (email email)
     (role role)
     (passphrase passphrase)
     (application-permissions application-permissions)))

  (let ((read-arg (call-with-input-string arg read)))
    (cond
     ((symbol? read-arg)
      (cond
       ((eq? read-arg 'none)
        'none)
       (else
        (error "Unrecognised symbol " read-arg))))
     ((list? read-arg)
      (apply signon-user-record
             (call-with-input-string arg read)))
     (else
      (error "Unrecognised signon user argument " arg)))))

(define options
  ;; Specifications of the command-line options.
  ;;
  ;; Specified as: names required-arg? optional-arg? processor
  (cons* (option '("share") #t #f
                 (lambda (opt name arg result)
                   (alist-cons 'file-system-mapping
                               (specification->file-system-mapping arg #t)
                               result)))
         (option '("no-data-persistence") #f #f
                 (lambda (opt name arg result)
                   (remove (match-lambda
                             (('file-system-mapping . value)
                              (string=? (file-system-mapping-target value)
                                      "/var/lib"))
                             ((key . value) #f))
                           result)))
         (option '("data-snapshot") #f #t
                 (lambda (opt namg arg result)
                   (alist-cons 'data-snapshot
                               arg
                               (alist-delete 'data-snapshot result))))
         (option '("rails-environment") #t #f
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'rails-environment
                                      arg
                                      (alist-delete 'rails-environment result))
                          rest)))
         (option '("host-name") #t #f
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'host-name
                                      arg
                                      (alist-delete 'host-name result))
                          rest)))
         (option '("app-domain") #t #f
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'app-domain
                                      arg
                                      (alist-delete 'app-domain result))
                          rest)))
         (option '("web-domain") #t #f
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'web-domain
                                      arg
                                      (alist-delete 'web-domain result))
                          rest)))
         (option '("admin-environment-label") #t #f
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'admin-environment-label
                                      arg
                                      (alist-delete 'admin-environment-label result))
                          rest)))
         (option '("signon-instance-name") #t #f
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'signon-instance-name
                                      arg
                                      (alist-delete 'signon-instance-name
                                                    result))
                          rest)))
         (option '("use-high-ports") #f #t
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'use-high-ports?
                                      (string=? arg "true")
                                      (alist-delete 'use-high-ports? result))
                          rest)))
         (option '("http-ports-mode") #f #t
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons
                           'http-ports-mode
                           (or (eq? arg #f)
                               (if (member arg '("high" "alternative" "standard"))
                                   (string->symbol arg)
                                   (error "Unknown http-ports argument" arg)))
                           (alist-delete 'http-ports-mode result))
                          rest)))
         (option '("use-https") #f #t
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons
                           'use-https?
                           (or (eq? arg #f)
                               (if (member arg '("development" "certbot"))
                                   (string->symbol arg)
                                   (error "Unknown https argument" arg)))
                           (alist-delete 'use-https? result))
                          rest)))
         (option '("type") #t #f
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'type
                                      (if (member
                                           arg
                                           '("vm-image-and-system"
                                             "vm-start-script"
                                             "container-start-script"))
                                          (string->symbol arg)
                                          (error "Unknown type argument" arg))
                                      (alist-delete 'type result))
                          rest)))
         (option '("signon-user") #t #f
                 (lambda (opt name arg result)
                   (alist-cons 'signon-users
                               (parse-signon-user-argument arg)
                               result)))
         (option '("origin-basic-auth") #t #f
                 (lambda (opt name arg result)
                   (alist-cons 'origin-basic-auth
                               (match (string-split arg #\=)
                                 ((username password)
                                  (cons username password))
                                 (_
                                  (error "Unable to parse " arg)))
                               result)))
         (option '("use-error-pages") #f #t
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'use-error-pages?
                                      (string=? arg "true")
                                      (alist-delete 'use-error-pages? result))
                          rest)))
         (option '("read-bundle-install-input-as-tar-archive") #f #t
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons
                           'read-bundle-install-input-as-tar-archive?
                           (string=? arg "true")
                           (alist-delete
                            'read-bundle-install-input-as-tar-archive? result))
                          rest)))
         %standard-build-options))

(define (option-values opts key)
  (reverse
   (filter-map (match-lambda
                 ((head . tail)
                  (and (eq? key head) tail))
                 (_ #f))
               opts)))

(define* (opts->operating-system
          opts
          #:key
          default-read-bundle-install-input-as-tar-archive?)
  (operating-system-for-services
   (assq-ref opts 'host-name)
   (option-values opts 'argument)
   (assq-ref opts 'rails-environment)
   (assq-ref opts 'app-domain)
   (assq-ref opts 'web-domain)
   (assq-ref opts 'admin-environment-label)
   (assq-ref opts 'signon-instance-name)
   (assq-ref opts 'use-high-ports?)
   (assq-ref opts 'use-https?)
   (option-values opts 'signon-users)
   (option-values opts 'origin-basic-auth)
   (option-value opts 'read-bundle-install-input-as-tar-archive?
                 #:default default-read-bundle-install-input-as-tar-archive?)
   (assq-ref opts 'http-ports-mode)
   (option-value opts 'use-error-pages?
                 #:default #f)
   (option-value opts 'data-snapshot
                 #:default #f)))

(define (container-start-script os opts)
  (with-store store
    (set-build-options-from-command-line store opts)

    (run-with-store store
      (mbegin %store-monad
        (set-grafting #f)
        (mlet* %store-monad
            ((sys (container-script
                   os
                   #:mappings (option-values opts 'file-system-mapping)
                   #:container-shared-network? #t)))
          (mbegin %store-monad
            (built-derivations (list sys))
            (return (derivation->output-path sys))))))))

(define (alter-services-for-vm os)
  (operating-system
    (inherit os)
    (services
     (cons* (login-service)

            (service virtual-terminal-service-type)
            (service console-font-service-type
                     (map (lambda (tty)
                            (cons tty %default-console-font))
                          '("tty1" "tty2" "tty3")))

            (agetty-service (agetty-configuration
                             (extra-options '("-L")) ; no carrier detect
                             (term "vt100")
                             (tty #f))) ; automatic

            (mingetty-service (mingetty-configuration
                               (tty "tty1")))
            (mingetty-service (mingetty-configuration
                               (tty "tty2")))
            (mingetty-service (mingetty-configuration
                               (tty "tty3")))

            (udev-service #:rules (list lvm2 fuse alsa-utils crda))

            (service static-networking-service-type
                     (list (static-networking (interface "lo")
                                              (ip "127.0.0.1")
                                              (requirement '())
                                              (provision '(loopback)))))

            (dhcp-client-service)

            (filter
             (lambda (s)
               (not (eq?
                     'dummy-loopback-service
                     (service-type-name
                      (service-kind s)))))
             (operating-system-user-services os))))))

(define* (option-value opts key #:key default)
  (let ((values (option-values opts key)))
    (if (null? values)
        default
        (car values))))

(define (vm-image-and-system os opts)
  (define vm-os
    (let ((base-os
           (virtualized-operating-system
            (alter-services-for-vm os)
            '())))
      (operating-system
        (inherit base-os)
        (file-systems
         (map (lambda (fs)
                (if (string=? (file-system-mount-point fs)
                              "/gnu/store")
                    (file-system
                      (inherit fs)
                      (device "TAG_gnu_store"))
                    fs))
              (operating-system-file-systems base-os))))))

  (with-store store
    (set-build-options-from-command-line store opts)

    (run-with-store store
      (mbegin %store-monad
        (set-grafting #f)
        (mlet* %store-monad
            ((item
              (gexp->derivation
               "vm-image-and-system"
               #~(begin
                   (mkdir #$output)
                   (chdir #$output)
                   (symlink #$((operating-system-derivation vm-os) store)
                            "system")
                   (symlink #$((system-qemu-image/shared-store
                                vm-os
                                ;; TODO: This shouldn't be necessary
                                #:disk-image-size (* 80 (expt 2 20)))
                               store)
                            "image")))))
          (mbegin %store-monad
            (built-derivations (list item))
            (return (derivation->output-path item))))))))

(define (vm-start-script os opts)
  (with-store store
    (set-build-options-from-command-line store opts)

    (run-with-store store
      (mbegin %store-monad
        (set-grafting #f)
        (mlet* %store-monad
            ((item
              (system-qemu-image/shared-store-script
               (alter-services-for-vm os))))
          (mbegin %store-monad
            (built-derivations (list item))
            (return (derivation->output-path item))))))))

(define (display-system-information os)

  (define (display-signon-service value)
    (display "Service: Signon\n")
    (display "  Users:\n")
    (match (find signon-config? value)
      (($ <signon-config> applications users)
       (for-each (match-lambda
                   (($ <signon-user>
                       name email passphrase role application-permissions)
                    (format #t "   - Name: ~a~%" name)
                    (format #t "     Email: ~a~%" email)
                    (format #t "     Role: ~a~%" role)
                    (format #t "     Passphrase: ~a~%"
                            passphrase)
                    (display "     Application permissions:\n")
                    (for-each (match-lambda
                                ((app . permissions)
                                 (simple-format #t "      - ~A (~A)\n"
                                                app (string-join
                                                     permissions
                                                     ", "))))
                              application-permissions)
                    (newline)))
                 users))))

  (define display-functions
    (list
     (cons signon-service-type display-signon-service)))

  (define (display-services-and-gather-others services)
    (fold
     (lambda (service other-services)
       (let ((type (service-kind service))
             (value (service-value service)))

         (let ((display-function
                (assq-ref display-functions type)))
           (if display-function
               (begin
                 (display-function value)
                 other-services)
               (cons service
                     other-services)))))
     '()
     services))

  (newline)
  (let* ((rest (display-services-and-gather-others
                (operating-system-user-services os))))
    (display "Other services:\n")
    (for-each (lambda (service)
                (format #t " - ~a~%" service))
              (stable-sort
               (map (lambda (service)
                      (symbol->string
                       (service-type-name (service-kind service))))
                    rest)
                string<?))))

(define (build . args)
  (let* ((opts (parse-command-line args options (list %default-options)))
         (type (or (assq-ref opts 'type)
                   'container-start-script))
         (os   (opts->operating-system
                opts
                #:default-read-bundle-install-input-as-tar-archive?
                (assq-ref
                 '((vm-image-and-system . #t)
                   (vm-start-script . #t)
                   (container-start-script . #f))
                 type)))
         (build-function
          (assq-ref
           `((vm-image-and-system . ,vm-image-and-system)
             (vm-start-script . ,vm-start-script)
             (container-start-script . ,container-start-script))
           type))
         (output (build-function os opts)))

    (display-system-information os)
    (newline)
    (display output)
    (newline)
    (exit 0)))

(define (start . args)
  (define (sudo-path)
    (find
     file-exists?
     '("/run/setuid-programs/sudo"
       "/usr/bin/sudo")))

  (define* (run args #:key as-root)
    (let ((command
           (if as-root
               (if (eq? (getuid) 1)
                   args
                   (cons (sudo-path) args))
               args)))
      (format #t "Running command:~%  ~a~2%" (string-join command " "))
      (status:exit-val
       (apply system* command))))

  (let* ((opts (parse-command-line args options (list %default-options)))
         (type (or (assq-ref opts 'type)
                     'container-start-script))
         (start-script-builder
          (or (assq-ref `((vm-start-script . ,vm-start-script)
                          (container-start-script . ,container-start-script))
                        type)
              (begin
                (simple-format #t "start is not supported for type:~A\n"
                             type)
                (exit 1))))
         (os (opts->operating-system
              opts
              #:default-read-bundle-install-input-as-tar-archive?
              (assq-ref
               '((vm-image-and-system . #t)
                 (vm-start-script . #t)
                 (container-start-script . #f))
               type)))
         (start-script (start-script-builder os opts)))

    (display-system-information os)
    (newline)
    (exit
     (run `(,start-script
            ,@(if (eq? type 'vm-start-script)
                  '("-m" "8G"
                    "-net" "user"
                    "-net" "nic,model=virtio"
                    "-enable-kvm")
                  '()))
          #:as-root (eq? type 'container-start-script)))))

(define (passphrase . args)
  (or (and=> (getenv "GOVUK_GUIX_DEVELOPMENT_PASSPHRASE")
             (lambda (passphrase)
               (simple-format
                #t
                "The passphrase (set through GOVUK_GUIX_DEVELOPMENT_PASSPHRASE) is: ~A"
                passphrase)))
      (let ((data-dir (or (getenv "XDG_DATA_HOME")
                          (and=> (getenv "HOME")
                                 (cut string-append <> "/.local/share")))))
        (if (file-exists? data-dir)
            (let* ((passphrase-file
                    (string-append
                     data-dir
                     "/govuk-guix/systems/development/passphrase")))
              (if (file-exists? passphrase-file)
                  (let ((passphrase
                         (call-with-input-file passphrase-file read-line)))
                    (simple-format
                     #t
                     "The passphrase for the development system is recorded in ~A. It is:\n\n  ~A\n\n"
                     passphrase-file
                     passphrase))
                  (leave
                   (G_ "The passphrase file could not be found at ~A")
                   passphrase-file)))
            (leave
             (G_ "The data directory could not be determined"))))))

(define (govuk-system . args)
  (define commands
    `(("start" . ,start)
      ("build" . ,build)
      ("passphrase" . ,passphrase)
      ("available-services" . ,available-services)))

  (display "\n")
  (with-error-handling
    (if (= (length args) 1)
        (leave (G_ "no command specified"))
        (let* ((command (second args))
               (handler
                (assoc-ref commands command)))
          (if handler
              (apply handler (cddr args))
              (leave (G_ "command ~A is not recognised") command))))))

(apply govuk-system (command-line))
