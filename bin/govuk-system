#!/usr/bin/guile --no-auto-compile
-*- scheme -*-
!#

;; To allow this script to be run directly, even from the Git
;; repository, check if the environment is setup by checking if the
;; (gds services) module is loadable. If it's not loadable, start this
;; script again, but use the guix-pre-inst-env helper to setup the
;; environment.
(catch
  #t
  (lambda ()
    (resolve-interface '(gds services)))
  (lambda args
    (exit
     (status:exit-val
      (apply
       system*
       "bash"
       (string-append (getcwd) "/guix-pre-inst-env")
       "guile"
       (current-filename)
       (cdr (command-line)))))))

(use-modules
 (srfi srfi-1)
 (srfi srfi-37)
 (ice-9 match)
 (guix ui)
 (guix monads)
 (guix scripts)
 (guix derivations)
 (guix store)
 (gnu services)
 (gnu services web)
 (gnu system)
 (gnu system linux-container)
 (gnu system file-systems)
 (gds services govuk)
 (gds systems utils)
 (gds systems govuk development))

(define (service-names->service-types service-names)
  (map
   (lambda (service-name)
     (or (find (lambda (service-type)
                 (equal?
                  (string->symbol service-name)
                  (service-type-name service-type)))
               (map service-kind govuk-services))
         (leave (_ "Could not find service with name ~A") service-name)))
   service-names))

(define (operating-system-for service-names)
  (system-without-unnecessary-services
   (let ((service-types-whitelist
          (append
           (if (null? service-names)
               (map service-kind govuk-services)
               (service-names->service-types service-names))
           (cons*
            nginx-service-type
            authenticating-proxy-service-type
            (map service-kind base-services)))))
     (filter
      (lambda (service)
        (member (service-kind service) service-types-whitelist))
      (operating-system-user-services development-os)))
   development-os))

(define options
  ;; Specifications of the command-line options.
  (list (option '("share") #t #f
                (lambda (opt name arg result)
                  (alist-cons 'file-system-mapping
                              (specification->file-system-mapping arg #t)
                              result)))))

(define (start . args)
  (define (option-values opts key)
    (reverse
     (filter-map (match-lambda
                   ((head . tail)
                    (and (eq? key head) tail))
                   (_ #f))
                 opts)))

  (define (start-script opts)
    (with-store store
      (run-with-store store
        (mlet* %store-monad
            ((sys (container-script
                   (operating-system-for (option-values opts 'argument))
                   #:mappings (option-values opts 'file-system-mapping)
                   #:container-shared-network? #t)))
          (mbegin %store-monad
            (built-derivations (list sys))
            (return (derivation->output-path sys)))))))

  (define (sudo-path)
    (find
     file-exists?
     '("/run/setuid-programs/sudo"
       "/usr/bin/sudo")))

  (let* ((opts (parse-command-line args options '(()))))
    (exit
     (status:exit-val
      (apply
       system*
       (if (eq? (getuid) 1)
           (list (start-script opts))
           (list
            (sudo-path)
            (start-script opts))))))))

(define (govuk-system . args)
  (define commands
    `(("start" . ,start)))

  (display "\n")
  (with-error-handling
    (if (= (length args) 1)
        (leave (_ "no command specified"))
        (let* ((command (second args))
               (handler
                (assoc-ref commands command)))
          (if handler
              (apply handler (cddr args))
              (leave (_ "command ~A is not recognised") command))))))

(apply govuk-system (command-line))
