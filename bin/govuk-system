#!/usr/bin/guile --no-auto-compile
-*- scheme -*-
!#

(define govuk-guix-root
  (or (and=> (current-filename)
             (lambda (x)
               (dirname (dirname x))))
      (getenv "GOVUK_GUIX_ROOT")))

;; To allow this script to be run directly, even from the Git
;; repository, check if the environment is setup by checking if the
;; (gds services) module is loadable. If it's not loadable, start this
;; script again, but use the guix-pre-inst-env helper to setup the
;; environment.
(catch
  #t
  (lambda ()
    (resolve-interface '(gds services)))
  (lambda args
    (let* ((govuk-guix-root
            (or govuk-guix-root
                (error "Unable to locate the govuk-guix root")))
           (command-full-path
            (string-append govuk-guix-root "/bin/govuk-system")))
      (apply execlp
             "bash"
             "--"
             (string-append govuk-guix-root "/guix-pre-inst-env")
             "guile"
             command-full-path
             (cdr (command-line))))))

(use-modules
 (srfi srfi-1)
 (srfi srfi-26)
 (srfi srfi-37)
 (ice-9 match)
 (ice-9 rdelim)
 (guix ui)
 (guix scripts)
 (guix scripts build)
 (guix build utils)
 (gnu services)
 (gnu system file-systems)
 (gds utils)
 (gds services utils)
 (gds services govuk)
 (gds services govuk signon)
 (gds systems govuk production)
 (gds systems govuk development)
 (gds scripts govuk system)
 (gds scripts govuk system start)
 (gds scripts govuk system build)
 (gds scripts govuk system init)
 (gds scripts govuk system passphrase)
 (gds scripts govuk system available-services))

(define %build-default-options
  ;; Alist of default option values.
  `((graft? . #t)
    (substitutes? . #t)
    (build-hook? . #t)
    (fallback? . #t)
    (print-build-trace? . #t)
    (debug . 0)))

(define %default-options
  (let ((data-dir (or (getenv "XDG_DATA_HOME")
                      (and=> (getenv "HOME")
                             (cut string-append <> "/.local/share")))))
    `(,@(if (file-exists? data-dir)
            (let ((var/lib-dir
                   (string-append
                    data-dir
                    "/govuk-guix/systems/development/state/var/lib")))
              (mkdir-p var/lib-dir)
              (list
               (cons
                'file-system-mapping
                (file-system-mapping (source var/lib-dir)
                                     (target "/var/lib")
                                     (writable? #t)))))
            '())
      (rails-environment . "development")
      (type . container-start-script)
      (base-os . ,govuk-development-os)
      (host-name . "dev.gov.uk")
      (use-high-ports? . #t)
      (use-https? . #f)
      ,@%build-default-options)))

(define (parse-signon-user-argument arg)
  (define* (signon-user-record
            #:key name email role
            (passphrase (random-base16-string 16))
            (application-permissions 'unset))
    (signon-user
     (name name)
     (email email)
     (role role)
     (passphrase passphrase)
     (application-permissions application-permissions)))

  (let ((read-arg (call-with-input-string arg read)))
    (cond
     ((symbol? read-arg)
      (cond
       ((eq? read-arg 'none)
        'none)
       (else
        (error "Unrecognised symbol " read-arg))))
     ((list? read-arg)
      (apply signon-user-record
             (call-with-input-string arg read)))
     (else
      (error "Unrecognised signon user argument " arg)))))

(define options
  ;; Specifications of the command-line options.
  ;;
  ;; Specified as: names required-arg? optional-arg? processor
  (cons* (option '("share") #t #f
                 (lambda (opt name arg result)
                   (alist-cons 'file-system-mapping
                               (if (string-any (char-set #\/) arg)
                                   (specification->file-system-mapping arg #t)
                                   (file-system-mapping
                                    (source (string-append (dirname govuk-guix-root)
                                                           "/" arg))
                                    (target (string-append "/var/apps/" arg))
                                    (writable? #t)))
                               result)))
         (option '("json") #f #t
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'json-output?
                                      (or (eq? arg #f) ; No value provided
                                          (string=? arg "true"))
                                      (alist-delete 'json-output? result))
                          rest)))
         (option '("no-data-persistence") #f #f
                 (lambda (opt name arg result)
                   (remove (match-lambda
                             (('file-system-mapping . value)
                              (string=? (file-system-mapping-target value)
                                      "/var/lib"))
                             ((key . value) #f))
                           result)))
         (option '("data-snapshot") #f #t
                 (lambda (opt namg arg result)
                   (alist-cons 'data-snapshot
                               arg
                               (alist-delete 'data-snapshot result))))
         (option '("ami-name") #f #t
                 (lambda (opt namg arg result)
                   (alist-cons 'ami-name
                               arg
                               (alist-delete 'ami-name result))))
         (option '("rails-environment") #t #f
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'rails-environment
                                      arg
                                      (alist-delete 'rails-environment result))
                          rest)))
         (option '("host-name") #t #f
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'host-name
                                      arg
                                      (alist-delete 'host-name result))
                          rest)))
         (option '("app-domain") #t #f
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'app-domain
                                      arg
                                      (alist-delete 'app-domain result))
                          rest)))
         (option '("web-domain") #t #f
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'web-domain
                                      arg
                                      (alist-delete 'web-domain result))
                          rest)))
         (option '("admin-environment-label") #t #f
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'admin-environment-label
                                      arg
                                      (alist-delete 'admin-environment-label result))
                          rest)))
         (option '("signon-instance-name") #t #f
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'signon-instance-name
                                      arg
                                      (alist-delete 'signon-instance-name
                                                    result))
                          rest)))
         (option '("use-high-ports") #f #t
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'use-high-ports?
                                      (or (eq? arg #f) ; No value provided
                                          (string=? arg "true"))
                                      (alist-delete 'use-high-ports? result))
                          rest)))
         (option '("http-ports-mode") #f #t
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons
                           'http-ports-mode
                           (or (eq? arg #f)
                               (if (member arg '("high" "alternative" "standard"))
                                   (string->symbol arg)
                                   (error "Unknown http-ports argument" arg)))
                           (alist-delete 'http-ports-mode result))
                          rest)))
         (option '("use-https") #f #t
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons
                           'use-https?
                           (or (eq? arg #f)
                               (if (member arg '("development" "certbot"))
                                   (string->symbol arg)
                                   (error "Unknown https argument" arg)))
                           (alist-delete 'use-https? result))
                          rest)))
         (option '("type") #t #f
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'type
                                      (if (member
                                           arg
                                           '("vm-image-and-system"
                                             "vm-start-script"
                                             "aws-packer-template"
                                             "aws-packer-ami"
                                             "disk-image"
                                             "container-start-script"))
                                          (string->symbol arg)
                                          (error "Unknown type argument" arg))
                                      (alist-delete 'type result))
                          rest)))
         (option '("base-os") #t #f
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons
                           'base-os
                           (force
                            (or (assoc-ref
                                 `(("production" . ,govuk-production-os)
                                   ("test" .
                                    ,(delay (@ (gds systems govuk test) govuk-test-os)))
                                   ("publishing-e2e-tests" .
                                    ,(delay (@ (gds systems govuk publishing-e2e-tests)
                                               publishing-e2e-tests-os)))
                                   ("publishing-e2e-tests-isolated" .
                                    ,(delay
                                       (@ (gds systems govuk publishing-e2e-tests-isolated)
                                          publishing-e2e-tests-isolated-os)))
                                   ("aws" .
                                    ,(delay (@ (gds systems govuk aws) govuk-aws-os)))
                                   ("development" . ,govuk-development-os))
                                 arg)
                                (error "Unknown type argument" arg)))
                           (alist-delete 'base-os result))
                          rest)))
         (option '("target") #t #f
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'target
                                      arg
                                      (alist-delete 'target result))
                          rest)))
         (option '("bootloader-target") #t #f
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'bootloader-target
                                      arg
                                      (alist-delete 'bootloader-target result))
                          rest)))
         (option '("signon-user") #t #f
                 (lambda (opt name arg result)
                   (alist-cons 'signon-users
                               (parse-signon-user-argument arg)
                               result)))
         (option '("origin-basic-auth") #t #f
                 (lambda (opt name arg result)
                   (alist-cons 'origin-basic-auth
                               (match (string-split arg #\=)
                                 ((username password)
                                  (cons username password))
                                 (_
                                  (error "Unable to parse " arg)))
                               result)))
         (option '("use-error-pages") #f #t
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons 'use-error-pages?
                                      (or (eq? arg #f) ; No value provided
                                          (string=? arg "true"))
                                      (alist-delete 'use-error-pages? result))
                          rest)))
         (option '("read-bundle-install-input-as-tar-archive") #f #t
                 (lambda (opt name arg result . rest)
                   (apply values
                          (alist-cons
                           'read-bundle-install-input-as-tar-archive?
                           (or (eq? arg #f) ; No value provided
                               (string=? arg "true"))
                           (alist-delete
                            'read-bundle-install-input-as-tar-archive? result))
                          rest)))
         %standard-build-options))

(define (govuk-system . args)
  (define commands
    `(("start" . ,start)
      ("build" . ,build)
      ("init" . ,init)
      ("passphrase" . ,passphrase)
      ("available-services" . ,available-services)))

  (display "\n")
  (with-error-handling
    (if (= (length args) 1)
        (leave (G_ "no command specified"))
        (let* ((command (second args))
               (handler (assoc-ref commands command))
               (opts (parse-command-line (cddr args) options (list %default-options))))
          (if handler
              (handler opts)
              (leave (G_ "command ~A is not recognised") command))))))

(apply govuk-system (command-line))
